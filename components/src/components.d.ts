/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CarbonAccordionOptions } from "./components/carbon-accordion/carbon-accordion";
import { CarbonChartOptions } from "./components/carbon-chart/carbon-chart";
import { CarbonCheckboxOptions } from "./components/carbon-checkbox/carbon-checkbox";
import { CarbonDatePickerOptions } from "./components/carbon-datepicker/carbon-datepicker";
import { CarbonInputOptions } from "./components/carbon-input/carbon-input";
import { CarbonRadioOptions } from "./components/carbon-radio/carbon-radio";
import { CarbonSelectOptions } from "./components/carbon-select/carbon-select";
import { CarbonSliderOptions } from "./components/carbon-slider/carbon-slider";
import { CarbonTableOptions } from "./components/carbon-table/carbon-table";
import { CarbonTextareaOptions } from "./components/carbon-textarea/carbon-textarea";
import { CarbonToggleOptions } from "./components/carbon-toggle/carbon-toggle";
export namespace Components {
    interface CarbonAccordion {
        "open": boolean;
        "options": CarbonAccordionOptions;
        "setOptions": (options: CarbonAccordionOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": Array<{ label: string; content: string; }> | undefined;
    }
    interface CarbonChart {
        "setOptions": (options: CarbonChartOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": {
    data: number[],
    labels: string[]
  };
    }
    interface CarbonCheckbox {
        "options": CarbonCheckboxOptions;
        "setOptions": (options: CarbonCheckboxOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": boolean;
    }
    interface CarbonDatepicker {
        "setOptions": (options: CarbonDatePickerOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": string;
    }
    interface CarbonInput {
        "options": CarbonInputOptions;
        "setOptions": (options: CarbonInputOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": string;
    }
    interface CarbonRadio {
        "setOptions": (options: CarbonRadioOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": string;
    }
    interface CarbonSelect {
        "setOptions": (options: CarbonSelectOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": string;
    }
    interface CarbonSlider {
        "options": CarbonSliderOptions;
        "setOptions": (options: CarbonSliderOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": number;
    }
    interface CarbonTable {
        "setOptions": (options: CarbonTableOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": {
    data: number[],
    labels: string[]
  };
    }
    interface CarbonTextarea {
        "options": CarbonTextareaOptions;
        "setOptions": (options: CarbonTextareaOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": string;
    }
    interface CarbonToggle {
        "options": CarbonToggleOptions;
        "setOptions": (options: CarbonToggleOptions) => Promise<void>;
        "setValue": (value: any) => Promise<void>;
        "value": boolean;
    }
}
export interface CarbonAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonAccordionElement;
}
export interface CarbonChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonChartElement;
}
export interface CarbonCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonCheckboxElement;
}
export interface CarbonDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonDatepickerElement;
}
export interface CarbonInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonInputElement;
}
export interface CarbonRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonRadioElement;
}
export interface CarbonSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonSelectElement;
}
export interface CarbonSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonSliderElement;
}
export interface CarbonTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonTableElement;
}
export interface CarbonTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonTextareaElement;
}
export interface CarbonToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCarbonToggleElement;
}
declare global {
    interface HTMLCarbonAccordionElement extends Components.CarbonAccordion, HTMLStencilElement {
    }
    var HTMLCarbonAccordionElement: {
        prototype: HTMLCarbonAccordionElement;
        new (): HTMLCarbonAccordionElement;
    };
    interface HTMLCarbonChartElement extends Components.CarbonChart, HTMLStencilElement {
    }
    var HTMLCarbonChartElement: {
        prototype: HTMLCarbonChartElement;
        new (): HTMLCarbonChartElement;
    };
    interface HTMLCarbonCheckboxElement extends Components.CarbonCheckbox, HTMLStencilElement {
    }
    var HTMLCarbonCheckboxElement: {
        prototype: HTMLCarbonCheckboxElement;
        new (): HTMLCarbonCheckboxElement;
    };
    interface HTMLCarbonDatepickerElement extends Components.CarbonDatepicker, HTMLStencilElement {
    }
    var HTMLCarbonDatepickerElement: {
        prototype: HTMLCarbonDatepickerElement;
        new (): HTMLCarbonDatepickerElement;
    };
    interface HTMLCarbonInputElement extends Components.CarbonInput, HTMLStencilElement {
    }
    var HTMLCarbonInputElement: {
        prototype: HTMLCarbonInputElement;
        new (): HTMLCarbonInputElement;
    };
    interface HTMLCarbonRadioElement extends Components.CarbonRadio, HTMLStencilElement {
    }
    var HTMLCarbonRadioElement: {
        prototype: HTMLCarbonRadioElement;
        new (): HTMLCarbonRadioElement;
    };
    interface HTMLCarbonSelectElement extends Components.CarbonSelect, HTMLStencilElement {
    }
    var HTMLCarbonSelectElement: {
        prototype: HTMLCarbonSelectElement;
        new (): HTMLCarbonSelectElement;
    };
    interface HTMLCarbonSliderElement extends Components.CarbonSlider, HTMLStencilElement {
    }
    var HTMLCarbonSliderElement: {
        prototype: HTMLCarbonSliderElement;
        new (): HTMLCarbonSliderElement;
    };
    interface HTMLCarbonTableElement extends Components.CarbonTable, HTMLStencilElement {
    }
    var HTMLCarbonTableElement: {
        prototype: HTMLCarbonTableElement;
        new (): HTMLCarbonTableElement;
    };
    interface HTMLCarbonTextareaElement extends Components.CarbonTextarea, HTMLStencilElement {
    }
    var HTMLCarbonTextareaElement: {
        prototype: HTMLCarbonTextareaElement;
        new (): HTMLCarbonTextareaElement;
    };
    interface HTMLCarbonToggleElement extends Components.CarbonToggle, HTMLStencilElement {
    }
    var HTMLCarbonToggleElement: {
        prototype: HTMLCarbonToggleElement;
        new (): HTMLCarbonToggleElement;
    };
    interface HTMLElementTagNameMap {
        "carbon-accordion": HTMLCarbonAccordionElement;
        "carbon-chart": HTMLCarbonChartElement;
        "carbon-checkbox": HTMLCarbonCheckboxElement;
        "carbon-datepicker": HTMLCarbonDatepickerElement;
        "carbon-input": HTMLCarbonInputElement;
        "carbon-radio": HTMLCarbonRadioElement;
        "carbon-select": HTMLCarbonSelectElement;
        "carbon-slider": HTMLCarbonSliderElement;
        "carbon-table": HTMLCarbonTableElement;
        "carbon-textarea": HTMLCarbonTextareaElement;
        "carbon-toggle": HTMLCarbonToggleElement;
    }
}
declare namespace LocalJSX {
    interface CarbonAccordion {
        "onOpen"?: (event: CarbonAccordionCustomEvent<any>) => void;
        "open"?: boolean;
        "options"?: CarbonAccordionOptions;
        "value"?: Array<{ label: string; content: string; }> | undefined;
    }
    interface CarbonChart {
        "onValue"?: (event: CarbonChartCustomEvent<any>) => void;
        "value"?: {
    data: number[],
    labels: string[]
  };
    }
    interface CarbonCheckbox {
        "onValue"?: (event: CarbonCheckboxCustomEvent<any>) => void;
        "options"?: CarbonCheckboxOptions;
        "value"?: boolean;
    }
    interface CarbonDatepicker {
        "onValue"?: (event: CarbonDatepickerCustomEvent<any>) => void;
        "value"?: string;
    }
    interface CarbonInput {
        "onValue"?: (event: CarbonInputCustomEvent<any>) => void;
        "options"?: CarbonInputOptions;
        "value"?: string;
    }
    interface CarbonRadio {
        "onValue"?: (event: CarbonRadioCustomEvent<any>) => void;
        "value"?: string;
    }
    interface CarbonSelect {
        "onValue"?: (event: CarbonSelectCustomEvent<any>) => void;
        "value"?: string;
    }
    interface CarbonSlider {
        "onValue"?: (event: CarbonSliderCustomEvent<any>) => void;
        "options"?: CarbonSliderOptions;
        "value"?: number;
    }
    interface CarbonTable {
        "onValue"?: (event: CarbonTableCustomEvent<any>) => void;
        "value"?: {
    data: number[],
    labels: string[]
  };
    }
    interface CarbonTextarea {
        "onValue"?: (event: CarbonTextareaCustomEvent<any>) => void;
        "options"?: CarbonTextareaOptions;
        "value"?: string;
    }
    interface CarbonToggle {
        "onValue"?: (event: CarbonToggleCustomEvent<any>) => void;
        "options"?: CarbonToggleOptions;
        "value"?: boolean;
    }
    interface IntrinsicElements {
        "carbon-accordion": CarbonAccordion;
        "carbon-chart": CarbonChart;
        "carbon-checkbox": CarbonCheckbox;
        "carbon-datepicker": CarbonDatepicker;
        "carbon-input": CarbonInput;
        "carbon-radio": CarbonRadio;
        "carbon-select": CarbonSelect;
        "carbon-slider": CarbonSlider;
        "carbon-table": CarbonTable;
        "carbon-textarea": CarbonTextarea;
        "carbon-toggle": CarbonToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "carbon-accordion": LocalJSX.CarbonAccordion & JSXBase.HTMLAttributes<HTMLCarbonAccordionElement>;
            "carbon-chart": LocalJSX.CarbonChart & JSXBase.HTMLAttributes<HTMLCarbonChartElement>;
            "carbon-checkbox": LocalJSX.CarbonCheckbox & JSXBase.HTMLAttributes<HTMLCarbonCheckboxElement>;
            "carbon-datepicker": LocalJSX.CarbonDatepicker & JSXBase.HTMLAttributes<HTMLCarbonDatepickerElement>;
            "carbon-input": LocalJSX.CarbonInput & JSXBase.HTMLAttributes<HTMLCarbonInputElement>;
            "carbon-radio": LocalJSX.CarbonRadio & JSXBase.HTMLAttributes<HTMLCarbonRadioElement>;
            "carbon-select": LocalJSX.CarbonSelect & JSXBase.HTMLAttributes<HTMLCarbonSelectElement>;
            "carbon-slider": LocalJSX.CarbonSlider & JSXBase.HTMLAttributes<HTMLCarbonSliderElement>;
            "carbon-table": LocalJSX.CarbonTable & JSXBase.HTMLAttributes<HTMLCarbonTableElement>;
            "carbon-textarea": LocalJSX.CarbonTextarea & JSXBase.HTMLAttributes<HTMLCarbonTextareaElement>;
            "carbon-toggle": LocalJSX.CarbonToggle & JSXBase.HTMLAttributes<HTMLCarbonToggleElement>;
        }
    }
}
